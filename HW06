/* 1. Retrieve all the names of all cities located in Peru, sorted alphabetically. 
Name your output attribute city. [Result Size: 30 rows of {"city":...}]*/

SELECT  u.name as city
FROM hw5.world x, x.mondial.country y, y.province z,
            CASE  WHEN is_array(z.city) THEN z.city
                  ELSE [z.city] END u
WHERE  y.name='Peru'
ORDER BY city;

/* 2. For each country return its name, its population, and the number of religions, sorted alphabetically by country. Report 0 religions for countries without religions. 
Name your output attributes country, population, num_religions. [Result Size:  238 rows of {"num_religions":..., "country":..., "population":...} (order of keys can differ)] */

SELECT c.name as country, c.population, coll_count(religions) as num_religions
FROM hw5.world x, x.mondial.country c
	LET religions = CASE WHEN c.religions IS MISSING THEN []
	      WHEN is_array(c.religions) THEN c.religions
              ELSE [c.religions] END;

/**/
SELECT  r.`#text` as religion, count(r.`#text`) as num_countries
FROM hw5.world x, x.mondial.country c,
	CASE WHEN c.religions IS MISSING THEN []
	      WHEN is_array(c.religions) THEN c.religions
              ELSE [c.religions] END r
group by r.`#text`;

select u.text as ethnic_group, count(*) as num_countries, sum(float(u.percent) * float(u.pop) /100.0) as total_population
from(select y.population as pop,
		     z.`#text` as text,
		     z.`-percentage` as percent
      from  hw5.world x,
            x.mondial.country y,
   		   CASE WHEN y.ethnicgroups is missing THEN []
                 WHEN is_array(y.ethnicgroups) THEN y.ethnicgroups
                 ELSE [y.ethnicgroups] END z) u
group by u.text;

SELECT m.`-country` as country_code, m.name as mountain, m.height as height, y.name as country_name
FROM hw5.world x, x.mondial.mountain m, x.mondial.country y
where m.`-country`  = y.`-car_code`
ORDER BY height desc;

SELECT y.`-car_code` AS country_code,  y.name as country_name,
       (SELECT  m.name as mountain, m.height as height
        FROM x.mondial.mountain m
        WHERE m.`-country` = y.`-car_code`) AS mountains
FROM hw5.world x, x.mondial.country y;

SELECT y.name AS country_name, seas, y.`-car_code` AS country_code
FROM hw5.world x, x.mondial.country y
LET seas = ( SELECT z.name AS sea
FROM x.mondial.sea z, split(z.`-country`, ' ') r
WHERE y.`-car_code` = r)
where coll_count(seas) > 2;


SELECT y.name AS countryName, y.`-car_code` AS country_code,  y.`-area` as area
FROM hw5.world x, x.mondial.country y
LET m = ( SELECT z.name AS sea
FROM hw5.world x2, x2.mondial.sea z, split(z.`-country`, ' ') r
WHERE y.`-car_code` = r)
WHERE coll_count(m) <1
ORDER BY area desc ;

SELECT distinct c1.name as first_country, c2.name as second_country
FROM
(SELECT c.name as name, s.name as sea, m.name as mountain
FROM hw5.world x, x.mondial.country c, x.mondial.sea s, x.mondial.mountain m, split(s.`-country`, " ") seas, split(m.`-country`, " ") mt
WHERE seas = c.`-car_code` and mt = c.`-car_code` ) as c1,
(SELECT c.name as name, s.name as sea, m.name as mountain
FROM hw5.world x, x.mondial.country c, x.mondial.sea s, x.mondial.mountain m, split(s.`-country`, " ") seas, split(m.`-country`, " ") mt
WHERE seas = c.`-car_code` and mt = c.`-car_code` ) as c2

WHERE c1.sea = c2.sea AND c1.mountain = c2.mountain AND c1.name < c2.name;


/*Duration of all jobs: 63.418 sec*/

DROP DATAVERSE hw5index IF EXISTS;

CREATE DATAVERSE hw5index IF NOT EXISTS;

USE hw5index;

CREATE TYPE countryType AS OPEN {
    `-car_code`: string,
    `-area`: string,
    population: string
};

CREATE DATASET country(countryType)
   PRIMARY KEY `-car_code`;

CREATE INDEX countryID ON country(`-car_code`) TYPE BTREE;

LOAD DATASET country USING localfs(("path"="127.0.0.1:///Users/melodyyu/Desktop/Work/cse414/cse414-yuching3/hw/hw5/starter-code/country.adm"),("format"="adm"));

CREATE TYPE mountainType AS OPEN{
    `-id`: string ,
    `-country`: string,
auto_id:uuid};

CREATE DATASET mountain(mountainType)   PRIMARY KEY auto_id AUTOGENERATED;

CREATE INDEX mountainID ON mountain(`-country`) TYPE KEYWORD;

LOAD DATASET mountain USING localfs(("path"="127.0.0.1:///Users/melodyyu/Desktop/Work/cse414/cse414-yuching3/hw/hw5/starter-code/mountain.adm"),("format"="adm"));

CREATE TYPE seaType AS OPEN{
    `-id`: string,
    `-country`: string,
auto_id: uuid};

CREATE DATASET sea(seaType)   PRIMARY KEY auto_id AUTOGENERATED;

CREATE INDEX seaID ON sea(`-country`) TYPE KEYWORD;

LOAD DATASET sea USING localfs(("path"="127.0.0.1:///Users/melodyyu/Desktop/Work/cse414/cse414-yuching3/hw/hw5/starter-code/sea.adm"),("format"="adm"));

USE hw5index;
SELECT distinct c1.name as first_country, c2.name as second_country
FROM
(SELECT c.name as name, s.name as sea, m.name as mountain
FROM country c, sea s, mountain m, split(s.`-country`, " ") seas, split(m.`-country`, " ") mt
WHERE seas = c.`-car_code` and mt = c.`-car_code` ) as c1,
(SELECT c.name as name, s.name as sea, m.name as mountain
FROM country c, sea s, mountain m, split(s.`-country`, " ") seas, split(m.`-country`, " ") mt
WHERE seas = c.`-car_code` and mt = c.`-car_code` ) as c2

WHERE c1.sea = c2.sea AND c1.mountain = c2.mountain AND c1.name < c2.name;

/*Duration of all jobs: 0.094 sec*/

USE hw5index;

SELECT c1.name as first_country, c2.name as second_country, mountains, seas
FROM country c1, country c2
LET seas = (SELECT DISTINCT s.name as sea
            FROM sea s, split(s.`-country`, " ") s1, split(s.`-country`, " ") s2
            WHERE s1 = c1.`-car_code` and s2 = c2.`-car_code`),
mountains = (SELECT DISTINCT m.name as mountain
            FROM mountain m, split(m.`-country`, " ") m1, split(m.`-country`, " ") m2
            WHERE m1 = c1.`-car_code` and m2 = c2.`-car_code`)
WHERE c1.name < c2.name AND len(seas) > 0 AND len(mountains) > 0;
